const { parse } = require('graphql');

const templater = (actionName, actionsSdl, derive) => {

  console.log('Running the codegen for: ' + actionName);

  // parse the actions SDL into an AST
  let ast;
  try {
    ast = parse(actionsSdl)
    console.log('Parsed the action SDL into an AST!');
  } catch (e) {
    throw Error('invalid sdl')
  }

  return [
    {
      name: actionName + 'Handler.md',
      content: `# ${actionName}Handler

This file contains the boilerplate code for a webhook that can handle this action.

This file was generated by the script in \`my-new-codegen/actions-codegen.js\`.
`
    },
    {
      name: 'HasuraActionTypes.md',
      content: `# Action Type Definitions

If you're writing a codegen for a statitcally typed language, this second codegenerated file would typically contain the type definitions required to handle the action. Eg: The input types that are specific to this action.
`
    }
  ];

};
